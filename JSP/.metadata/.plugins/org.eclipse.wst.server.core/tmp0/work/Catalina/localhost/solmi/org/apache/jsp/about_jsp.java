/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2022-08-30 18:02:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class about_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>About</title>\r\n");
      out.write("    <link rel = \"stylesheet\" href = \"css/main.css\">\r\n");
      out.write("    <link rel = \"stylesheet\" href = \"css/about.css\">\r\n");
      out.write("    <style>\r\n");
      out.write("        @import url('https://fonts.googleapis.com/css2?family=Roboto+Slab&display=swap');\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"container\">\r\n");
      out.write("    \r\n");
      out.write("    <header id = \"header\"> \r\n");
      out.write("        <nav class =\"menu\">\r\n");
      out.write("            <ul>\r\n");
      out.write("                <li><a href = \"./main.jsp\"> <b>Home</b></a></li>\r\n");
      out.write("                <li><a href = \"./about.jsp\" > <b>About</b></a></li>\r\n");
      out.write("                <li><a href = \"./favorites.jsp\"> <b>What I love</b></a></li>\r\n");
      out.write("                <li><a href = \"./contact.jsp\"> <b>Contact</b></a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </nav>\r\n");
      out.write("    </header> \r\n");
      out.write("    <div class=\"list\">\r\n");
      out.write("      <div class =\"two\">\r\n");
      out.write("          <img class = \"me\" src =\"img/전신.jpg\" alt=\"\" width=\"450px;\" height=\"500px\">\r\n");
      out.write("          <h3 class =\"intext\"> <strong>\"너를 믿고 너를 좋아해 주는 사람들을 믿고 앞으로도 잘하자!\"<br><br><br>\r\n");
      out.write("          안녕하세요! 저는 25살 진솔미입니다@.@<br>\r\n");
      out.write("           취미는 맛있는 음식을 먹으면서 영화나 애니매이션 보기,<br>\r\n");
      out.write("           독서, 음악 감상, 소품 구경하기입니다.<br>\r\n");
      out.write("           요즘은 필라테스랑 블로그 포스팅에도 푹 빠져있답니다~.~<br>\r\n");
      out.write("           MBTI는 종종 바뀌지만 INFP가 젤 맞는 것 같습니다.<br>\r\n");
      out.write("           낭만을 추구하고 감성적이고 혼자 있는 걸 좋아해요!<br>\r\n");
      out.write("           장점은 기억력이 좋아요!<br> 또 소소한 것에 감사할 줄 알고 거기에 큰 행복을 느낄 줄 아는 사람이란 것입니다.<br>\r\n");
      out.write("			단점은 상처를 너무 잘 받고 멀티태스킹이 안되고 의지가 약한 편입니다^^;<br>\r\n");
      out.write("			남은 학기도 같이 잘 지냈으면 좋겠어요^0^<br>\r\n");
      out.write("			감사합니다.<br></strong></h3>\r\n");
      out.write("			         \r\n");
      out.write("\r\n");
      out.write("      </div>\r\n");
      out.write("  </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
